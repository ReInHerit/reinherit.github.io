{"version":3,"file":"component---src-pages-exhibitions-conflicts-conflict-questions-2nd-question-conflict-index-tsx-036ef40b2f7cdd5ceb16.js","mappings":"iSAqFA,EAhF4B,WAExB,OAAkDA,EAAAA,EAAAA,YAA3CC,EAAP,KAA0BC,EAA1B,KAEMC,EAAoC,oBAAXC,OAAyBC,aAAaC,QAAQ,mBAAqB,KAC5FC,EAAM,IAAIC,EAAAA,kBAAkBC,EAAAA,UAG5BC,EAAiB,mCAAG,iHAEhBH,EAAII,sBAAsBF,GAFV,uBAGhBF,EAAIK,WAHY,cAIhBC,EAASN,EAAIO,WAAW,WAExBC,EAASC,KAAKC,UAAUhB,GANR,SAOAY,EAAOK,OAAO,CAACC,QAAShB,EAAiBiB,YAAaL,IAPtD,cAOhBM,EAPgB,yBAQfA,GARe,kCAWtBC,QAAQC,MAAM,UAAd,MAXsB,0DAAH,qDA4BjBC,EAAiB,SAAAC,GACnBvB,EAAqBuB,EAAEC,OAAOC,QAG5BC,EAAa,mCAAG,WAAOH,GAAP,wEAClBA,EAAEI,iBADgB,SAEZnB,IAFY,OAGlBN,OAAO0B,SAASC,KAAO,+DAHL,2CAAH,sDAMvB,OACA,gBAAC,WAAD,KAEA,sBAAIC,UAAU,QAAd,gCAIQ,gBAACC,EAAA,EAAD,CAAMC,SAAUN,GAxBO,CACvB,gNACA,6IACA,mOACA,gLACA,sIAoBwBO,KAAI,SAACC,EAAqBC,GAAtB,OAC1B,gBAACJ,EAAA,QAAD,CACEK,KAAK,QAAQC,KAAK,gBAClBZ,MAAOS,EACPI,MAAOJ,EACPK,GAAE,UAAYJ,EACdK,IAAG,UAAYL,EACfM,QAASP,IAAwBnC,EACjC2C,SAAUpB,OAGV,uBAAKQ,UAAU,qBACX,uBAAKA,UAAU,uBACf,uBAAKA,UAAU,iBAAiBa,IAAI,2CAA2CC,IAAI,MAEnF,gBAACC,EAAA,EAAD,CAAQf,UAAU,iBAClBM,KAAK,SAASU,UAAW/C,EAAmBgD,QAASrB,GACrD,sBAAIsB,MAAO,CAAEC,MAAO,UAApB,sBCjDhB,EAtBgC,WAEhC,OACI,gBAAC,IAAD,KACC,uBAAKnB,UAAU,4BAIV,gBAACoB,EAAA,EAAD,CAAOpB,UAAU,+BAA8B,mDAIjD,uBAAKA,UAAU,oBACb,yCACE,gBAAC,EAAD,W,kBCHZ,IAEIqB,EAAU,aA2CdC,EAAOC,QAAUF","sources":["webpack://reinherit-digital-hub/./src/components/shared/ExhibitionQuestions/questionsConflict/B_questionConflict.tsx","webpack://reinherit-digital-hub/./src/pages/exhibitions/conflicts/ConflictQuestions/2ndQuestionConflict/index.tsx","webpack://reinherit-digital-hub/./node_modules/warning/warning.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport { Button, Form } from \"react-bootstrap\"\nimport {GoogleSpreadsheet} from \"google-spreadsheet\"\nimport creds from \"./cred/myjson.json\"\n\nconst QuestionTwoConflict = () => {\n\n    const [answerTwoConflict, setAnswerTwoConflict] = useState() \n\n    const currentCountryB = typeof window !== 'undefined' ? localStorage.getItem('countryConflict') : null\n    const doc = new GoogleSpreadsheet(creds.sheet_id)\n\n\n    const appendSpreadsheet = async () => {\n    try {\n        await doc.useServiceAccountAuth(creds);\n        await doc.loadInfo();\n        const sheetB = doc.sheetsById[713196235];\n\n        const valueB = JSON.stringify(answerTwoConflict)\n        const resultB = await sheetB.addRow({country: currentCountryB, questionTwo: valueB});\n        return resultB;\n\n    } catch (e) {\n        console.error(\"Error: \", e);\n        }\n    }\n\n //   useEffect(() => {\n //       localStorage.setItem('answerTwoConflict', JSON.stringify(answerTwoConflict));\n //     }, [answerTwoConflict]);\n    \n\n// these set the answer, once clicked, within the Form - the recorded value is stored as \"answerOne\"\n    const AnswersTwoConflict = [\n        \"No. Resistance can be a very good thing and sometimes even becomes a duty. Often you even have to defend what is important to you. In this case I not only have the right but also the duty to defend myself.\",\n        \"I don't know if it is evil to fight back. But for my part I abhor any form of violence. Therefore, if in doubt, I would not defend myself.\",\n        \"Anyone who thinks it is evil to stand up for one's freedom, for example, morally equates oppressor and victim. But that is wrong. A perpetrator is never on the same moral level as the victim. So it is not evil to fight back.\",\n        \"Anyone who resists creates counter-violence with his violence. This definitely leads to a spiral of violence. So it may not be evil to fight back, but it is at least unwise.\",\n        \"Imagine your parents' house suddenly being illegally occupied. What should prevent you from fighting back? Nothing. Any questions?\"\n    ]\n    const onOptionChange = e => {\n        setAnswerTwoConflict(e.target.value) \n    }\n\n    const handleSubmitB = async (e) => {\n        e.preventDefault();\n        await appendSpreadsheet();\n        window.location.href = \"/exhibitions/conflicts/ConflictQuestions/3rdQuestionConflict\";\n      };\n\nreturn (\n<React.Fragment>\n\n<h1 className=\"mt-5\">\nIs it bad if you fight back?\n</h1>\n\n        <Form onSubmit={handleSubmitB} >\n            {AnswersTwoConflict.map((possAnswTwoConflict, index) => (\n          <Form.Check\n            type=\"radio\" name=\"exh_questions\"\n            value={possAnswTwoConflict}\n            label={possAnswTwoConflict}\n            id={`answer-${index}`}\n            key={`answer-${index}`}\n            checked={possAnswTwoConflict === answerTwoConflict }\n            onChange={onOptionChange}\n            ></Form.Check>\n        ))}\n            <div className=\"exh_submit_button\">\n                <div className=\"exh_arrow_container\">\n                <img className=\"exh_blue_arrow\" src=\"/images/exhibition_assets/arrow_blue.svg\" alt=\"\"></img>\n            </div>\n                <Button className=\"exh_submit_btn\" \n                type=\"submit\" disabled={!answerTwoConflict} onClick={handleSubmitB} >\n                <h1 style={{ color: \"white\" }}>Next Question</h1>\n                </Button>\n            </div> \n        </Form>\n\n</React.Fragment>\n    )\n  }\n  \nexport default QuestionTwoConflict\n\n","import React from \"react\"\nimport { Container, Badge } from \"react-bootstrap\"\nimport BaseExhibitionConflict from \"../../../../../components/static/BaseExhibitionConflicts\"\nimport QuestionTwoConflict from \"../../../../../components/shared/ExhibitionQuestions/questionsConflict/B_questionConflict\"\n\nconst questionTwoConflictPage = () => {\n\nreturn (\n    <BaseExhibitionConflict>\n     <div className=\"exh_container_inner mt-5\">\n\n{/*Intro text*/}\n   \n          <Badge className=\"badgeConflicts rounded-pill\"><h1>ReThinking CONFLICTS</h1></Badge>\n    \n\n{/*Actual Form answers - radio checks; followed by button to next page*/}\n        <div className=\"conflictsAnswers\">\n          <h2>Question: 2</h2>\n            <QuestionTwoConflict></QuestionTwoConflict>\n        </div>\n        \n     </div>\n    </BaseExhibitionConflict>\n    )\n  }\n\nexport default questionTwoConflictPage;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"names":["useState","answerTwoConflict","setAnswerTwoConflict","currentCountryB","window","localStorage","getItem","doc","GoogleSpreadsheet","creds","appendSpreadsheet","useServiceAccountAuth","loadInfo","sheetB","sheetsById","valueB","JSON","stringify","addRow","country","questionTwo","resultB","console","error","onOptionChange","e","target","value","handleSubmitB","preventDefault","location","href","className","Form","onSubmit","map","possAnswTwoConflict","index","type","name","label","id","key","checked","onChange","src","alt","Button","disabled","onClick","style","color","Badge","warning","module","exports"],"sourceRoot":""}