{"version":3,"sources":["webpack://reinherit-digital-hub/./src/components/shared/ExhibitionQuestions/questionsConflict/B_questionConflict.tsx","webpack://reinherit-digital-hub/./src/pages/exhibitions/conflicts/ConflictQuestions/2ndQuestionConflict/index.tsx","webpack://reinherit-digital-hub/./node_modules/warning/warning.js"],"names":["useState","answerTwoConflict","setAnswerTwoConflict","currentCountryB","window","localStorage","getItem","doc","GoogleSpreadsheet","creds","appendSpreadsheet","useServiceAccountAuth","loadInfo","sheetB","sheetsById","valueB","JSON","stringify","addRow","country","questionTwo","resultB","console","error","onOptionChange","e","target","value","className","Form","onSubmit","preventDefault","map","possAnswTwoConflict","type","label","checked","onChange","Button","style","color","href","Container","fluid","Badge","warning","module","exports"],"mappings":"4SAiFA,EA5E4B,WAAM,OAEoBA,gBAA3CC,EAFuB,KAEJC,EAFI,KAIxBC,EAAoC,oBAAXC,OAAyBC,aAAaC,QAAQ,mBAAqB,KAC5FC,EAAM,IAAIC,oBAAkBC,YAG5BC,EAAiB,mCAAG,iHAEhBH,EAAII,sBAAsBF,GAFV,uBAGhBF,EAAIK,WAHY,cAIhBC,EAASN,EAAIO,WAAW,WAExBC,EAASC,KAAKC,UAAUhB,GANR,SAOAY,EAAOK,OAAO,CAACC,QAAShB,EAAiBiB,YAAaL,IAPtD,cAOhBM,EAPgB,yBAQfA,GARe,kCAWtBC,QAAQC,MAAM,UAAd,MAXsB,0DAAH,qDA0BjBC,EAAiB,SAAAC,GACnBvB,EAAqBuB,EAAEC,OAAOC,QAQtC,OACA,gBAAC,WAAD,KAEA,sBAAIC,UAAU,QAAd,iEAEQ,gBAACC,EAAA,EAAD,CAAMC,SAVY,SAACL,GACnBA,EAAEM,iBACFrB,MAXuB,CACvB,wBACA,uBACA,wBAiBwBsB,KAAI,SAAAC,GAAmB,OAC7C,gBAACJ,EAAA,QAAD,CACEK,KAAK,QACLP,MAAOM,EACPE,MAAOF,EACPG,QAASH,IAAwBhC,EACjCoC,SAAUb,OAGb,uBAAKI,UAAU,eACZ,gBAACU,EAAA,EAAD,CAAQV,UAAU,oCAClBM,KAAK,UAED,sBAAIK,MAAO,CAACC,MAAO,UAAnB,yBAdR,YAkBI,uBAAKZ,UAAU,eACX,gBAACU,EAAA,EAAD,CAAQV,UAAU,oCAAoCa,KAAK,+DACvD,sBAAIF,MAAO,CAACC,MAAO,UAAnB,iBC/CpB,EArBgC,WAEhC,OACI,gBAAC,IAAD,KACC,gBAACE,EAAA,EAAD,CAAWC,OAAK,EAACf,UAAU,YAGxB,uBAAKA,UAAU,gBACb,gBAACgB,EAAA,EAAD,CAAOhB,UAAU,+BAA8B,oDAIjD,uBAAKA,UAAU,oBACX,gBAAC,EAAD,W,+BCFZ,IAEIiB,EAAU,aA2CdC,EAAOC,QAAUF","file":"component---src-pages-exhibitions-conflicts-conflict-questions-2nd-question-conflict-index-tsx-aa740fdaaad22584ab9c.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\nimport { Button, Form } from \"react-bootstrap\"\r\nimport {GoogleSpreadsheet} from \"google-spreadsheet\"\r\nimport creds from \"./cred/myjson.json\"\r\n\r\nconst QuestionTwoConflict = () => {\r\n\r\n    const [answerTwoConflict, setAnswerTwoConflict] = useState() \r\n\r\n    const currentCountryB = typeof window !== 'undefined' ? localStorage.getItem('countryConflict') : null\r\n    const doc = new GoogleSpreadsheet(creds.sheet_id)\r\n\r\n\r\n    const appendSpreadsheet = async () => {\r\n    try {\r\n        await doc.useServiceAccountAuth(creds);\r\n        await doc.loadInfo();\r\n        const sheetB = doc.sheetsById[713196235];\r\n\r\n        const valueB = JSON.stringify(answerTwoConflict)\r\n        const resultB = await sheetB.addRow({country: currentCountryB, questionTwo: valueB});\r\n        return resultB;\r\n\r\n    } catch (e) {\r\n        console.error(\"Error: \", e);\r\n        }\r\n    }\r\n\r\n //   useEffect(() => {\r\n //       localStorage.setItem('answerTwoConflict', JSON.stringify(answerTwoConflict));\r\n //     }, [answerTwoConflict]);\r\n    \r\n\r\n// these set the answer, once clicked, within the Form - the recorded value is stored as \"answerOne\"\r\n    const AnswersTwoConflict = [\r\n        \"Answer 1. test for 2.\", \r\n        \"Answer 2. test for 2\", \r\n        \"Answer 3. test for 2\"\r\n    ]\r\n    const onOptionChange = e => {\r\n        setAnswerTwoConflict(e.target.value) \r\n    }\r\n\r\n    const handleSubmitB = (e) => {\r\n        e.preventDefault()\r\n        appendSpreadsheet()\r\n    } \r\n\r\nreturn (\r\n<React.Fragment>\r\n\r\n<h1 className=\"mt-5\">Question 2: new test question what needs to be improved here?</h1>\r\n\r\n        <Form onSubmit={handleSubmitB} >\r\n            {AnswersTwoConflict.map(possAnswTwoConflict => (\r\n          <Form.Check\r\n            type=\"radio\"\r\n            value={possAnswTwoConflict}\r\n            label={possAnswTwoConflict}\r\n            checked={possAnswTwoConflict === answerTwoConflict }\r\n            onChange={onOptionChange}\r\n            ></Form.Check>\r\n        ))}\r\n         <div className=\"d-grid mt-5\">\r\n            <Button className=\"btn-primary rounded-pill m-3 mt-0\" \r\n            type=\"submit\"\r\n            >\r\n                <h1 style={{color: \"white\"}}>Confirm your choice</h1>\r\n            </Button>\r\n         </div>        </Form>\r\n\r\n            <div className=\"d-grid mt-5\">\r\n                <Button className=\"btn-primary rounded-pill m-3 mt-0\" href=\"exhibitions/conflicts/ConflictQuestions/3rdQuestionConflict\">\r\n                    <h1 style={{color: \"white\"}}>Next Page</h1>\r\n                </Button>\r\n            </div>\r\n\r\n</React.Fragment>\r\n    )\r\n  }\r\n  \r\nexport default QuestionTwoConflict\r\n\r\n","import React from \"react\"\r\nimport { Container, Badge } from \"react-bootstrap\"\r\nimport BaseExhibitionConflict from \"../../../../../components/static/BaseExhibitionConflicts\"\r\nimport QuestionTwoConflict from \"../../../../../components/shared/ExhibitionQuestions/questionsConflict/B_questionConflict\"\r\n\r\nconst questionTwoConflictPage = () => {\r\n\r\nreturn (\r\n    <BaseExhibitionConflict>\r\n     <Container fluid className=\"mt-5 p-5\">\r\n\r\n{/*Intro text*/}\r\n        <div className=\"d-grid gap-2\">\r\n          <Badge className=\"badgeConflicts rounded-pill\"><h1>ReThinking CONFLICTS</h1></Badge>\r\n        </div>\r\n\r\n{/*Actual Form answers - radio checks; followed by button to next page*/}\r\n        <div className=\"conflictsAnswers\">\r\n            <QuestionTwoConflict></QuestionTwoConflict>\r\n        </div>\r\n        \r\n     </Container>\r\n    </BaseExhibitionConflict>\r\n    )\r\n  }\r\n\r\nexport default questionTwoConflictPage;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"sourceRoot":""}