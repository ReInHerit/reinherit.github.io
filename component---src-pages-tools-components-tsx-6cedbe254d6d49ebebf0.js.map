{"version":3,"sources":["webpack://reinherit-digital-hub/./src/components/shared/ToolComponentsFeed/index.tsx","webpack://reinherit-digital-hub/./src/pages/tools/components.tsx"],"names":["data","useStaticQuery","ToolsQuery","React","tags","ReinCardGrid","allMarkdownRemark","edges","map","edge","length","some","curTag","node","frontmatter","tool_type","includes","ReinGridCard","key","pageId","body","excerpt","title","url","uid","footerContent","className","icon","faClock","scale","wordCount","words","faStamp","license","mainReference","style","color","target","href","faLink","thumbnail","Thumbnail","src","BaseLayout","pageTitle","MainHeading","subHeading","subText","breadCrumb","label","value","ToolComponentsFeed"],"mappings":"uRA2EA,EA3DwC,WACtC,IAAMA,GAA4BC,QAAeC,GADL,EAGpBC,WAAe,IAAhCC,EAHqC,UAsB5C,OACM,gBAACC,EAAA,EAAD,KACGL,EAAKM,kBAAkBC,MAAMC,KAAI,SAAAC,GAEhC,OACkB,IAAhBL,EAAKM,QACJN,EAAKO,MAAK,SAAAC,GACT,QAAKH,EAAKI,KAAKC,YAAYC,WACpBN,EAAKI,KAAKC,YAAYC,UAAUC,SAASJ,MAMhD,gBAACK,EAAA,EAAD,CACEC,IAAKT,EAAKI,KAAKC,YAAYK,OAC3BC,KAAMX,EAAKI,KAAKQ,QAChBC,MAAOb,EAAKI,KAAKC,YAAYQ,MAC7BC,IAAG,qBAAuBd,EAAKI,KAAKC,YAAYK,OAChDK,IAAKf,EAAKI,KAAKC,YAAYK,OAC3BM,cACE,2BACE,qBAAGC,UAAU,OAAM,gBAAC,IAAD,CAAiBC,KAAMC,KAASC,MAAO,QAA1D,MAAsEpB,EAAKI,KAAKiB,UAAUC,MAA1F,UACA,qBAAGL,UAAU,OAAM,gBAAC,IAAD,CAAiBC,KAAMK,MAASH,MAAO,QAA1D,MAAsEpB,EAAKI,KAAKC,YAAYmB,SAC3FxB,EAAKI,KAAKC,YAAYoB,eAAiB,qBAAGR,UAAU,OAAM,qBAAGS,MAAO,CAACC,MAAM,WAAYV,UAAU,uBAAuBW,OAAO,SAASC,KAAM7B,EAAKI,KAAKC,YAAYoB,eAAe,gBAAC,IAAD,CAAiBP,KAAMY,MAAQV,MAAO,QAA/J,MAA2KpB,EAAKI,KAAKC,YAAYoB,kBAI/PzB,EAAKI,KAAKC,YAAY0B,WAAa,gBAACC,EAAA,EAAD,CAAWC,IAAKjC,EAAKI,KAAKC,YAAY0B,kBAjB9E,OA4BRtC,EAAa,a,oBC/CnB,EAnB8B,WAC5B,OACE,gBAACyC,EAAA,EAAD,CACAC,UAAU,+CAER,gBAACC,EAAA,EAAD,CACEC,WAAW,2FACXC,QAAQ,mGACRC,WAAY,CACV,CAACC,MAAM,YAAaC,MAAM,cAC1B,CAACD,MAAM,oBAAqBC,MAAM,uBALtC,4BAQA,qBAAGxB,UAAU,SACb,gBAACyB,EAAD","file":"component---src-pages-tools-components-tsx-6cedbe254d6d49ebebf0.js","sourcesContent":["import { faClock } from \"@fortawesome/free-regular-svg-icons\"\nimport { faLink, faStamp } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport { Badge, Form } from \"react-bootstrap\"\nimport { ReinUtils } from \"../../../utils/ReinUtil\"\nimport SideMainLayout from \"../Layout/SideMainLayout\"\nimport ReinCardGrid from \"../ReinCardGrid\"\nimport ReinGridCard from \"../ReinCardGrid/ReinGridCard\"\nimport Thumbnail from \"../Thumbnail\"\n\n/**\n * Overview over all available toolkit components\n * @returns\n */\nconst ToolkitComponentsFeed: React.FC = () => {\n  const data: ToolsQueryData.Data = useStaticQuery(ToolsQuery)\n\n  const [tags, setTags] = React.useState([])\n\n  const ALL_TAGS = [\n    \"Tag A\",\n    \"Tag B\",\n    \"Tag C\"\n  ]\n\n  const toggleTag = (toToggle: string) => {\n    let tagsCopied = [...tags]\n    if (tags.includes(toToggle)) {\n      let filtered = tagsCopied.filter(curTag => toToggle !== curTag)\n      setTags(() => filtered)\n    } else {\n      tagsCopied.push(toToggle)\n      setTags(() => tagsCopied)\n    }\n  }\n\n  return (\n        <ReinCardGrid>\n          {data.allMarkdownRemark.edges.map(edge => {\n            // filter only if no tags were selected\n            if (\n              tags.length !== 0 &&\n              !tags.some(curTag => {\n                if (!edge.node.frontmatter.tool_type) return false\n                return edge.node.frontmatter.tool_type.includes(curTag)\n              })\n            ) {\n              return\n            } else {\n              return (\n                <ReinGridCard\n                  key={edge.node.frontmatter.pageId}\n                  body={edge.node.excerpt}\n                  title={edge.node.frontmatter.title}\n                  url={`/tools/components/${edge.node.frontmatter.pageId}`}\n                  uid={edge.node.frontmatter.pageId}\n                  footerContent={\n                    <div>\n                      <p className=\"m-0\"><FontAwesomeIcon icon={faClock} scale={\".5x\"}/> - {edge.node.wordCount.words} words</p>\n                      <p className=\"m-0\"><FontAwesomeIcon icon={faStamp} scale={\".5x\"}/> - {edge.node.frontmatter.license}</p>\n                      {edge.node.frontmatter.mainReference && <p className=\"m-0\"><a style={{color:\"#6c757d\"}} className=\"text-decoration-none\" target=\"_blank\" href={edge.node.frontmatter.mainReference}><FontAwesomeIcon icon={faLink} scale={\".5x\"}/> - {edge.node.frontmatter.mainReference}</a></p>}\n                    </div>\n                  }\n                >\n                  {edge.node.frontmatter.thumbnail && <Thumbnail src={edge.node.frontmatter.thumbnail}></Thumbnail>}\n                </ReinGridCard>\n              )\n            }\n          })}\n        </ReinCardGrid>\n      )\n}\n\nexport default ToolkitComponentsFeed\n\nconst ToolsQuery = graphql`\n  query ToolComponentsQuery {\n    allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"/toolcomponents/\" }\n        frontmatter: {}\n      }\n    ) {\n      edges {\n        node {\n          html\n          excerpt\n          frontmatter {\n            title\n            date(fromNow: true)\n            target_audience\n            layout\n            type\n            pageId\n            license\n            mainReference\n            thumbnail\n            tags\n          }\n          wordCount {\n            words\n          }\n        }\n      }\n    }\n  }\n`\n\ndeclare module ToolsQueryData {\n  export interface Frontmatter {\n    title: string\n    date: string\n    target_audience: string[]\n    layout?: any\n    author?: any\n    training_available: boolean\n    tool_type?: any\n    type: string\n    pageId: string\n    license: string\n    mainReference: string | null\n    thumbnail?: string\n    tags?: string[]\n  }\n\n  export interface Node {\n    html: string\n    excerpt: string\n    frontmatter: Frontmatter\n    wordCount: {\n      words: number\n    }\n  }\n\n  export interface Edge {\n    node: Node\n  }\n\n  export interface AllMarkdownRemark {\n    edges: Edge[]\n  }\n\n  export interface Data {\n    allMarkdownRemark: AllMarkdownRemark\n  }\n\n  export interface Extensions {}\n\n  export interface RootObject {\n    data: Data\n    extensions: Extensions\n  }\n}\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport ToolComponentsFeed from \"../../components/shared/ToolComponentsFeed\"\nimport BaseLayout from \"../../components/static/BaseLayout\"\nimport MainHeading from \"../../components/static/MainHeading\"\n\n/**\n * Main page for toolkit components (should render some kind of overview\n * over available toolkit components)\n * @returns \n */\nconst ToolkitComponentsPage = () => {\n  return (\n    <BaseLayout\n    pageTitle=\"Toolkit: components | ReInHerit Digital Hub\"\n    >\n      <MainHeading\n        subHeading=\"Glossary and technical explanation of the components used in the ReInHerit applications.\"\n        subText=\"Here you can discover more information about the building blocks for the ReInHerit applications.\"\n        breadCrumb={[\n          {label:\"Resources\", value:\"/resources\"},\n          {label:\"Toolkitcomponents\", value:\"/tools/components\"}\n        ]}\n      >Technological components</MainHeading>\n      <p className=\"w-75\"></p>\n      <ToolComponentsFeed></ToolComponentsFeed>\n    </BaseLayout>\n  )\n}\n\nexport default ToolkitComponentsPage\n"],"sourceRoot":""}