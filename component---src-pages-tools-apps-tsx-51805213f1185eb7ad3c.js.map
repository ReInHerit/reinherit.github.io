{"version":3,"sources":["webpack://reinherit-digital-hub/./src/components/shared/ToolAppsFeed/index.tsx","webpack://reinherit-digital-hub/./src/pages/tools/apps.tsx"],"names":["data","useStaticQuery","ToolsQuery","React","tags","ReinCardGrid","allMarkdownRemark","edges","map","edge","length","some","curTag","node","frontmatter","tool_type","includes","ReinGridCard","key","pageId","body","excerpt","title","url","uid","footerContent","className","icon","faClock","scale","wordCount","words","faStamp","license","thumbnail","Thumbnail","src","BaseLayout","pageTitle","MainHeading","subHeading","subText","breadCrumb","label","value","ToolAppsFeed"],"mappings":"6QA6EA,EA9D8B,WAC5B,IAAMA,GAA4BC,QAAeC,GADf,EAGVC,WAAe,IAAhCC,EAH2B,UAwBpC,OACE,gBAACC,EAAA,EAAD,KACSL,EAAKM,kBAAkBC,MAAMC,KAAI,SAAAC,GAEhC,OACkB,IAAhBL,EAAKM,QACJN,EAAKO,MAAK,SAAAC,GAEP,QAAIH,EAAKI,KAAKC,YAAYC,WACnBN,EAAKI,KAAKC,YAAYC,UAAUC,SAASJ,MAOlD,gBAACK,EAAA,EAAD,CACEC,IAAKT,EAAKI,KAAKC,YAAYK,OAC3BC,KAAMX,EAAKI,KAAKQ,QAChBC,MAAOb,EAAKI,KAAKC,YAAYQ,MAC7BC,IAAG,eAAiBd,EAAKI,KAAKC,YAAYK,OAC1CK,IAAKf,EAAKI,KAAKC,YAAYK,OAC3BM,cACE,2BACE,qBAAGC,UAAU,OAAM,gBAAC,IAAD,CAAiBC,KAAMC,KAASC,MAAO,QAA1D,MAAsEpB,EAAKI,KAAKiB,UAAUC,MAA1F,UACA,qBAAGL,UAAU,OAAM,gBAAC,IAAD,CAAiBC,KAAMK,MAASH,MAAO,QAA1D,MAAsEpB,EAAKI,KAAKC,YAAYmB,WAI9FxB,EAAKI,KAAKC,YAAYoB,WAAa,gBAACC,EAAA,EAAD,CAAWC,IAAK3B,EAAKI,KAAKC,YAAYoB,kBAhB/E,OA2BRhC,EAAa,Y,+BCnDnB,EArBgB,WACd,OACE,gBAAC,KAAD,KACA,gBAACmC,EAAA,EAAD,CACAC,UAAU,sDAER,gBAACC,EAAA,EAAD,CACEC,WAAW,uDACXC,QAAQ,oGACRC,WAAY,CACV,CAACC,MAAM,YAAaC,MAAM,cAC1B,CAACD,MAAM,6BAA8BC,MAAM,iBAL/C,gBAQA,0BACA,gBAACC,EAAD","file":"component---src-pages-tools-apps-tsx-51805213f1185eb7ad3c.js","sourcesContent":["import { faClock } from \"@fortawesome/free-regular-svg-icons\"\r\nimport { faStamp, faLink } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\nimport React from \"react\"\r\nimport { Badge, Form } from \"react-bootstrap\"\r\nimport SideMainLayout from \"../Layout/SideMainLayout\"\r\nimport ReinCardGrid from \"../ReinCardGrid\"\r\nimport ReinGridCard from \"../ReinCardGrid/ReinGridCard\"\r\nimport Thumbnail from \"../Thumbnail\"\r\n\r\n/**\r\n *\r\n * @returns\r\n */\r\nconst ToolkitFeed: React.FC = () => {\r\n  const data: ToolsQueryData.Data = useStaticQuery(ToolsQuery)\r\n\r\n  const [tags, setTags] = React.useState([])\r\n\r\n  const ALL_TAGS = [\r\n    \"Tag A\",\r\n    \"Tag B\",\r\n    \"Tag C\"\r\n  ]\r\n\r\n{/*\r\n  const toggleTag = (toToggle: string) => {\r\n    let tagsCopied = [...tags]\r\n    if (tags.includes(toToggle)) {\r\n      let filtered = tagsCopied.filter(curTag => toToggle !== curTag)\r\n      setTags(() => filtered)\r\n    } else {\r\n      tagsCopied.push(toToggle)\r\n      setTags(() => tagsCopied)\r\n    }\r\n  }\r\n*/}\r\n\r\nreturn (\r\n  <ReinCardGrid>\r\n          {data.allMarkdownRemark.edges.map(edge => {\r\n            // filter only if no tags were selected\r\n            if (\r\n              tags.length !== 0 &&\r\n              !tags.some(curTag =>\r\n                {\r\n                  if(!edge.node.frontmatter.tool_type)return false;\r\n                  return edge.node.frontmatter.tool_type.includes(curTag)\r\n                }\r\n              )\r\n            ) {\r\n              return\r\n            } else {\r\n              return ( \r\n                <ReinGridCard\r\n                  key={edge.node.frontmatter.pageId}\r\n                  body={edge.node.excerpt}\r\n                  title={edge.node.frontmatter.title}\r\n                  url={`/tools/apps/${edge.node.frontmatter.pageId}`}\r\n                  uid={edge.node.frontmatter.pageId}\r\n                  footerContent={\r\n                    <div>\r\n                      <p className=\"m-0\"><FontAwesomeIcon icon={faClock} scale={\".5x\"}/> - {edge.node.wordCount.words} words</p>\r\n                      <p className=\"m-0\"><FontAwesomeIcon icon={faStamp} scale={\".5x\"}/> - {edge.node.frontmatter.license}</p>\r\n                    </div>\r\n                  }\r\n                >\r\n                  { edge.node.frontmatter.thumbnail && <Thumbnail src={edge.node.frontmatter.thumbnail}></Thumbnail>}\r\n                </ReinGridCard>\r\n              )\r\n            }\r\n          })}\r\n        </ReinCardGrid>\r\n  )\r\n}\r\n\r\nexport default ToolkitFeed\r\n\r\nconst ToolsQuery = graphql`\r\n  query ToolsQuery {\r\n    allMarkdownRemark(\r\n      filter: {fileAbsolutePath: {regex: \"/toolapps/\"}, frontmatter: {target_audience: {eq: \"PROFESSIONAL\"}, status: {eq: \"completed\"}}}\r\n      ) {\r\n      edges {\r\n        node {\r\n          html\r\n          excerpt\r\n          frontmatter {\r\n            title\r\n            date(fromNow: true)\r\n            target_audience\r\n            layout\r\n            type\r\n            pageId\r\n            license\r\n            thumbnail\r\n            chatApps\r\n          }\r\n          wordCount {\r\n            words\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\ndeclare module ToolsQueryData {\r\n\r\n  export interface Frontmatter {\r\n    title: string\r\n    date: string\r\n    target_audience: string[]\r\n    layout?: any\r\n    author?: any\r\n    training_available: boolean\r\n    tool_type?: any\r\n    type: string\r\n    pageId: string\r\n    license: string\r\n    status: string\r\n    thumbnail?: string\r\n  }\r\n\r\n  export interface Node {\r\n    html: string\r\n    excerpt: string\r\n    frontmatter: Frontmatter\r\n    wordCount: {\r\n      words: number\r\n    }\r\n  }\r\n\r\n  export interface Edge {\r\n    node: Node\r\n  }\r\n\r\n  export interface AllMarkdownRemark {\r\n    edges: Edge[]\r\n  }\r\n\r\n  export interface Data {\r\n    allMarkdownRemark: AllMarkdownRemark\r\n  }\r\n\r\n  export interface Extensions {}\r\n\r\n  export interface RootObject {\r\n    data: Data\r\n    extensions: Extensions\r\n  }\r\n}\r\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport ToolAppsFeed from \"../../components/shared/ToolAppsFeed\"\nimport BaseLayout from \"../../components/static/BaseLayout\"\nimport MainHeading from \"../../components/static/MainHeading\"\nimport {SSRProvider} from '@react-aria/ssr'\n\nconst Toolkit = () => {\n  return (\n    <SSRProvider>\n    <BaseLayout\n    pageTitle=\"Applications documentation | ReInHerit Digital Hub\"\n    >\n      <MainHeading\n        subHeading=\"Applications developed within the ReInHerit project.\"\n        subText=\"Here you will find the documentation for applications developed as part of the ReInHerit Toolkit.\"\n        breadCrumb={[\n          {label:\"Resources\", value:\"/resources\"},\n          {label:\"Applications Documentation\", value:\"/tools/apps\"}\n        ]}\n      >Applications</MainHeading>\n      <p></p>\n      <ToolAppsFeed></ToolAppsFeed>\n    </BaseLayout>\n    </SSRProvider>\n  )\n}\n\nexport default Toolkit\n"],"sourceRoot":""}