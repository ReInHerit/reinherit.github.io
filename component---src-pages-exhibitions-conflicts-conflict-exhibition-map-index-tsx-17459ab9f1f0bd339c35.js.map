{"version":3,"sources":["webpack://reinherit-digital-hub/./src/components/shared/ExhibitionQuestions/mapsConflict/Q1_map.tsx","webpack://reinherit-digital-hub/./src/pages/exhibitions/conflicts/ConflictExhibitionMap/index.tsx"],"names":["mapboxgl","doc","GoogleSpreadsheet","creds","useState","finalGeoJson","setfinalGeoJson","setAllRows","useEffect","useServiceAccountAuth","loadInfo","getInfo","sheet","sheetsByIndex","getRows","rows","AllRows","map","GoogleSpreadsheetRow","_rawData","sortingRows","country","questionOne","longitude","latitude","AnswerOneID","MyGeoJson","row","AnswerOneIDs","Number","fetchData","mapContainer","useRef","container","current","style","center","zoom","projection","source","layer","addControl","GeoJsonColl","on","addSource","type","data","cluster","addLayer","id","paint","property","stops","e","coordinates","features","geometry","slice","description","properties","Answer_chosen","Math","abs","lngLat","lng","setLngLat","setHTML","addTo","getCanvas","cursor","ref","className","Container","fluid","borderColor","Badge","Row","Col","Button","href"],"mappings":"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","file":"component---src-pages-exhibitions-conflicts-conflict-exhibition-map-index-tsx-17459ab9f1f0bd339c35.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport { useRef, useEffect, useState } from 'react';\r\nimport mapboxgl from '!mapbox-gl'; \r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport creds from '../questionsConflict/cred/myjson.json'\r\nimport {GoogleSpreadsheet} from \"google-spreadsheet\"\r\nimport { render } from \"react-dom\";\r\n\r\nconst MapQOne = () => {\r\n  mapboxgl.accessToken = \"pk.eyJ1Ijoia2lhLXoiLCJhIjoiY2xkZzRnZjRnMHRvazN2bzZ0cnh4OWtzeSJ9.COmQgzmRsKnMZKw77WDF6w\"\r\n  const doc = new GoogleSpreadsheet(creds.sheet_id)\r\n  const [finalGeoJson, setfinalGeoJson] = useState([]);\r\n\r\n        const [AllRows, setAllRows] = useState([]);\r\n        useEffect( () => { \r\n          async function fetchData() {\r\n                await doc.useServiceAccountAuth(creds);\r\n                await doc.loadInfo();      \r\n                await doc.getInfo();\r\n                const sheet = doc.sheetsByIndex[0];\r\n                const rows = await sheet.getRows();\r\n                const AllRows = rows.map((GoogleSpreadsheetRow) => GoogleSpreadsheetRow._rawData);\r\n            //  console.log(AllRows) \r\n                setAllRows(AllRows)\r\n                \r\n                const sortingRows = AllRows.map(({\r\n                  [0]: country, [1]: questionOne, [2]: longitude, [3]: latitude, [4]: AnswerOneID\r\n                }) => \r\n                ({country, questionOne, longitude, latitude, AnswerOneID}))\r\n            //  console.log(sortingRows)\r\n           \r\n            const MyGeoJson = sortingRows.map(row => {\r\n              return {\r\n                \"type\": \"Feature\",\r\n                \"properties\": {\r\n                    \"Answer_chosen\": row.AnswerOneIDs\r\n                },\r\n                \"geometry\": {\r\n                  \"coordinates\": [Number(row.longitude), Number(row.latitude)],\r\n                  \"type\": \"Point\",\r\n                },\r\n              }\r\n            })      \r\n            \r\n            setfinalGeoJson(MyGeoJson)\r\n\r\n        }\r\n        fetchData();\r\n    //    console.log(finalGeoJson)\r\n      }, []);\r\n\r\n      \r\n        const mapContainer = useRef(null);\r\n        useEffect(() => {\r\n            const map = new mapboxgl.Map({\r\n              container: mapContainer.current,\r\n              style: 'mapbox://styles/mapbox/light-v11',\r\n              center: [15.754, 48.228],\r\n              zoom: 5.15,\r\n              projection: 'naturalEarth',\r\n              source: 'finalGeoJson',\r\n              layer: 'finalGeoJson'\r\n            });\r\n    \r\n            map.addControl(new mapboxgl.NavigationControl(), \"top-right\");\r\n            \r\n            const GeoJsonColl = {\r\n                \"type\": \"FeatureCollection\",\r\n                \"features\": \r\n                    finalGeoJson\r\n              };\r\n                // This GeoJson is valid\r\n                // console.log(JSON.stringify(GeoJsonColl))            \r\n     \r\n        map.on('load', () => {\r\n\r\n            map.addSource('locations', {\r\n                type: 'geojson',\r\n                data: GeoJsonColl,\r\n                cluster: false,    \r\n              });\r\n\r\n            map.addLayer({\r\n                id: 'resultsAnswerOneConflict',\r\n                type: 'circle',\r\n                source: {\r\n                  type: 'geojson',\r\n                  data: GeoJsonColl\r\n                },\r\n                paint: {\r\n               'circle-color': '#dd502c',\r\n               'circle-stroke-width': 1,\r\n               'circle-stroke-color': '#dd502c',\r\n               'circle-opacity': 0.5,\r\n               'circle-radius': {\r\n                property: 'Answer_chosen',\r\n                // think how to make them more proportional to our responses\r\n                stops: [\r\n                  [2, 100],\r\n                  [101, 500],\r\n                  [501, 1000],\r\n                ]\r\n              }\r\n                }\r\n            })\r\n    \r\n            // pop up -- to be improved (still undefined)\r\n            map.on('click', 'resultsAnswerOneConflict', function(e) {\r\n                var coordinates = e.features[0].geometry.coordinates.slice();\r\n                var description =\r\n                `<h3>` +\r\n                e.features[0].properties.Answer_chosen +\r\n                `</h3>`\r\n\r\n                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                  }\r\n                \r\n                  //add Popup to map\r\n                  new mapboxgl.Popup()\r\n                    .setLngLat(coordinates)\r\n                    .setHTML(description)\r\n                    .addTo(map);\r\n                });\r\n                \r\n                // Change the cursor to a pointer when the mouse is over the places layer.\r\n                map.on('mouseenter', 'resultsAnswerOneConflict', function() {\r\n                  map.getCanvas().style.cursor = 'pointer';\r\n                });\r\n                \r\n                // Change it back to a pointer when it leaves.\r\n                map.on('mouseleave', 'places', function() {\r\n                  map.getCanvas().style.cursor = '';\r\n                });\r\n                \r\n\r\n\r\n        })\r\n       \r\n      \r\n\r\n           \r\n\r\n          })\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n    <React.Fragment>\r\n        <div>\r\n            <div ref={mapContainer} className=\"map-container\" />\r\n        </div>\r\n          \r\n        <div>\r\n            <h3 className=\"mt-5\">Question 1: new test question what needs to be improved here?</h3> \r\n                <p>\r\n                Answer 1. The following three objects deal with rising food prices and the effects of wars, with geopolitical conflicts and social hierarchies.\r\n                </p>\r\n                <p>\r\n                Answer 2. hfuiwhfalfjsjaiudgjd\r\n                </p>\r\n                <p>\r\n                Answer 3. hudiaghiudahgdkjgfdngkjfd    \r\n                </p>\r\n          \r\n        </div>\r\n    </React.Fragment>\r\n    );\r\n          \r\n}\r\n\r\nexport default MapQOne","import React from \"react\"\r\nimport { Container, Badge, Button, Row, Col } from \"react-bootstrap\"\r\nimport BaseExhibitionConflict from \"../../../../components/static/BaseExhibitionConflicts\"\r\nimport MapQOne from \"../../../../components/shared/ExhibitionQuestions/mapsConflict/Q1_map\"\r\n\r\nconst ConflictsAnswers: React.FC = () => {\r\n\r\nreturn (\r\n<BaseExhibitionConflict>\r\n  <Container fluid className=\"mt-5 p-5\" style={{borderColor: \"blue\"}}>\r\n  <div className=\"d-grid gap-2\">\r\n  <Badge className=\"badgeConflicts rounded-pill\"><h1>ReThinking CONFLICTS</h1></Badge>\r\n  </div>\r\n  \r\n  <Row>\r\n  <Col>\r\n  <Button className=\"rounded-pill bg-primary\" href=\"static\\index.html\">Question 1</Button>\r\n  </Col>\r\n  <Col>\r\n  <Button className=\"rounded-pill bg-primary\">Question 2</Button>\r\n  </Col>\r\n  <Col>\r\n  <Button className=\"rounded-pill bg-primary\">Question 3</Button>\r\n  </Col>\r\n  <Col>\r\n  <Button className=\"rounded-pill bg-primary\">Question 4</Button>\r\n  </Col>\r\n</Row>\r\n\r\n  <div className=\"d-grid mt-5\">\r\n    <MapQOne></MapQOne>\r\n  </div>\r\n\r\n  </Container>\r\n</BaseExhibitionConflict>\r\n    )\r\n  }\r\n\r\nexport default ConflictsAnswers"],"sourceRoot":""}