{"version":3,"file":"component---src-pages-exhibitions-conflicts-conflict-questions-4th-question-conflict-index-tsx-f522b8eea2d933dda74e.js","mappings":"gSAqFA,EAhF6B,WAEzB,OAAoDA,EAAAA,EAAAA,YAA7CC,EAAP,KAA2BC,EAA3B,KAEMC,EAAoC,oBAAXC,OAAyBC,aAAaC,QAAQ,mBAAqB,KAC5FC,EAAM,IAAIC,EAAAA,kBAAkBC,EAAAA,UAE5BC,EAAiB,mCAAG,iHAEhBH,EAAII,sBAAsBF,GAFV,uBAGhBF,EAAIK,WAHY,cAIhBC,EAASN,EAAIO,WAAW,WAExBC,EAASC,KAAKC,UAAUhB,GANR,SAOAY,EAAOK,OAAO,CAACC,QAAShB,EAAiBiB,aAAcL,IAPvD,cAOhBM,EAPgB,yBAQfA,GARe,kCAWtBC,QAAQC,MAAM,UAAd,MAXsB,0DAAH,qDA4BjBC,EAAiB,SAAAC,GACnBvB,EAAsBuB,EAAEC,OAAOC,QAG7BC,EAAa,mCAAG,WAAOH,GAAP,wEAClBA,EAAEI,iBADgB,SAEZnB,IAFY,OAGlBN,OAAO0B,SAASC,KAAO,8CAHL,2CAAH,sDAMvB,OACA,gBAAC,WAAD,KAEA,sBAAIC,UAAU,QAAd,+GAIQ,gBAACC,EAAA,EAAD,CAAMC,SAAUN,GAzBQ,CACxB,yIACA,+MACA,8OACA,uOACA,qGACA,sHAoByBO,KAAI,SAACC,EAAsBC,GAAvB,OAC3B,gBAACJ,EAAA,QAAD,CACEK,KAAK,QACLX,MAAOS,EACPG,MAAOH,EACPI,GAAE,UAAYH,EACdI,IAAG,UAAYJ,EACfK,QAASN,IAAyBnC,EAClC0C,SAAUnB,OAGX,uBAAKQ,UAAU,qBACV,uBAAKA,UAAU,uBACnB,uBAAKA,UAAU,iBAAiBY,IAAI,2CAA2CC,IAAI,MAEnF,gBAACC,EAAA,EAAD,CAAQd,UAAU,iBAClBM,KAAK,SAAUS,QAASnB,GACvB,sBAAIoB,MAAO,CAAEC,MAAO,UAApB,6BChDb,EAtBiC,WAEjC,OACI,gBAAC,IAAD,KACE,uBAAKjB,UAAU,4BAGjB,uBAAKA,UAAU,8CACL,gBAACkB,EAAA,EAAD,CAAOlB,UAAU,+BAA8B,oDAIrD,uBAAKA,UAAU,oBACf,yCACI,gBAAC,EAAD,W,kBCHZ,IAEImB,EAAU,aA2CdC,EAAOC,QAAUF","sources":["webpack://reinherit-digital-hub/./src/components/shared/ExhibitionQuestions/questionsConflict/D_questionConflict.tsx","webpack://reinherit-digital-hub/./src/pages/exhibitions/conflicts/ConflictQuestions/4thQuestionConflict/index.tsx","webpack://reinherit-digital-hub/./node_modules/warning/warning.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport { Button, Form } from \"react-bootstrap\"\nimport {GoogleSpreadsheet} from \"google-spreadsheet\"\nimport creds from \"./cred/myjson.json\"\n\nconst QuestionFourConflict = () => {\n\n    const [answerFourConflict, setAnswerFourConflict] = useState() \n\n    const currentCountryD = typeof window !== 'undefined' ? localStorage.getItem('countryConflict') : null\n    const doc = new GoogleSpreadsheet(creds.sheet_id)\n\n    const appendSpreadsheet = async () => {\n    try {\n        await doc.useServiceAccountAuth(creds);\n        await doc.loadInfo();\n        const sheetD = doc.sheetsById[678756205];\n\n        const valueD = JSON.stringify(answerFourConflict)\n        const resultD = await sheetD.addRow({country: currentCountryD, questionFour: valueD});\n        return resultD;\n\n    } catch (e) {\n        console.error(\"Error: \", e);\n        }\n    }\n \n//    useEffect(() => {\n//        localStorage.setItem('answerFourConflict', JSON.stringify(answerFourConflict));\n//      }, [answerFourConflict]);\n\n// these set the answer, once clicked, within the Form - the recorded value is stored as \"answerOne\"\n    const AnswersFourConflict = [\n        \"Generally, yes. Often one would rather be right than understand the other person. The end of dogmatism is often the end of a conflict.\",\n        \"No. Because every understanding sooner or later comes to an end. For example, I cannot understand when others do not understand that climate change threatens humanity. That is where my understanding ends.\",\n        \"This view is wrong. Quite often I can understand the attitude of a person and thus also understand it. However, the conflict has not yet been resolved by that. Because often I just do not share his attitude and I will not do it either.\",\n        \"It is not about understanding the other person, it is about getting along with them. In the case of a conflict, I therefore look for solutions that both parties can agree to. Results are more important than mutual understanding.\",\n        \"Yes. Because understanding the other opens up new perspectives and ways of resolving the conflict.\",\n        \"No. It is not about understanding, it is about interests. You do not have to understand them, they are just there.\"\n    ]\n    const onOptionChange = e => {\n        setAnswerFourConflict(e.target.value) \n    }\n\n    const handleSubmitD = async (e) => {\n        e.preventDefault();\n        await appendSpreadsheet();\n        window.location.href = \"exhibitions/conflicts/ConflictExhibitionMap\";\n      };\n\nreturn (\n<React.Fragment>\n\n<h1 className=\"mt-5\">\nMany people think that conflicts arise primarily because people do not understand each other. Do you agree?\n</h1>\n\n        <Form onSubmit={handleSubmitD} >\n            {AnswersFourConflict.map((possAnswFourConflict, index) => (\n          <Form.Check\n            type=\"radio\"\n            value={possAnswFourConflict}\n            label={possAnswFourConflict}\n            id={`answer-${index}`}\n            key={`answer-${index}`}\n            checked={possAnswFourConflict === answerFourConflict }\n            onChange={onOptionChange}\n            ></Form.Check>\n        ))}\n           <div className=\"exh_submit_button\">\n                <div className=\"exh_arrow_container\">\n            <img className=\"exh_blue_arrow\" src=\"/images/exhibition_assets/arrow_blue.svg\" alt=\"\"></img>\n            </div>\n            <Button className=\"exh_submit_btn\" \n            type=\"submit\"  onClick={handleSubmitD} >\n             <h1 style={{ color: \"white\" }}>Submit & Show Result</h1>\n            </Button>\n         </div>        \n         </Form>\n\n   \n</React.Fragment>\n    )\n  }\n\nexport default QuestionFourConflict\n\n","import React from \"react\"\nimport { Container, Badge } from \"react-bootstrap\"\nimport BaseExhibitionConflict from \"../../../../../components/static/BaseExhibitionConflicts\"\nimport QuestionFourConflict from \"../../../../../components/shared/ExhibitionQuestions/questionsConflict/D_questionConflict\"\n\nconst questionFourConflictPage = () => {\n\nreturn (\n    <BaseExhibitionConflict>\n      <div className=\"exh_container_inner mt-5\">\n\n{/*Intro text*/}\n    <div className=\"conflictsQuestions exh_question_intro_text\">\n              <Badge className=\"badgeConflicts rounded-pill\"><h1>ReThinking CONFLICTS</h1></Badge>\n        \n    </div>\n{/*Actual Form answers - radio checks; followed by button to next page*/}\n        <div className=\"conflictsAnswers\">\n        <h2>Question: 4</h2>\n            <QuestionFourConflict></QuestionFourConflict>\n        </div>\n        \n     </div>\n    </BaseExhibitionConflict>\n    )\n  }\n\nexport default questionFourConflictPage;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"names":["useState","answerFourConflict","setAnswerFourConflict","currentCountryD","window","localStorage","getItem","doc","GoogleSpreadsheet","creds","appendSpreadsheet","useServiceAccountAuth","loadInfo","sheetD","sheetsById","valueD","JSON","stringify","addRow","country","questionFour","resultD","console","error","onOptionChange","e","target","value","handleSubmitD","preventDefault","location","href","className","Form","onSubmit","map","possAnswFourConflict","index","type","label","id","key","checked","onChange","src","alt","Button","onClick","style","color","Badge","warning","module","exports"],"sourceRoot":""}