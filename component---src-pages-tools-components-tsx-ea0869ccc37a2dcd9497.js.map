{"version":3,"file":"component---src-pages-tools-components-tsx-ea0869ccc37a2dcd9497.js","mappings":"yKAwBA,IAXwC,SAAAA,GACtC,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,KAAMA,EAAMC,MACZ,gBAAC,IAAD,CAAKC,GAAI,EAAGC,IAAK,IACdH,EAAMI,a,mNCqGf,EAvGwC,WACtC,IAAMC,GAA4BC,EAAAA,EAAAA,IAAeC,GAEjD,EAAwBC,EAAAA,SAAe,IAAhCC,EAAP,KAAaC,EAAb,KAQMC,EAAY,SAACC,GACjB,IAAIC,GAAU,OAAOJ,GACrB,GAAIA,EAAKK,SAASF,GAAW,CAC3B,IAAIG,EAAWF,EAAWG,QAAO,SAAAC,GAAM,OAAIL,IAAaK,KACxDP,GAAQ,kBAAMK,UAEdF,EAAWK,KAAKN,GAChBF,GAAQ,kBAAMG,MAIlB,OACE,gBAACM,EAAA,EAAD,CACElB,KACE,uBAAKmB,UAAU,0CACb,8CACiB,IAAhBX,EAAKY,OACJZ,EAAKa,KAAI,SAAAC,GAAG,OACV,gBAACC,EAAA,EAAD,CACEC,QAAS,kBAAMd,EAAUY,IACzBG,GAAG,QACHC,MAAM,QACNC,KAAM,QACNR,UAAU,mBAETG,MAIL,gBAACC,EAAA,EAAD,CACEJ,UAAU,kBACVM,GAAG,QACHC,MAAM,QACNC,KAAM,SAJR,KASF,2BACCC,EAAAA,EAAAA,kBAA4BxB,GAA2ByB,OAAOR,KAAI,SAAAL,GAAM,OACvE,gBAACc,EAAA,QAAD,CACEC,KAAK,WACLC,QAASxB,EAAKK,SAASG,GACvBiB,gBAAgB,EAChBC,IAAKlB,EACLQ,QAAS,kBAAMd,EAAUM,IACzBmB,MAAOnB,EACPoB,MAAOpB,SAMf,gCACE,gBAACqB,EAAA,EAAD,KACGjC,EAAKkC,kBAAkBC,MAAMlB,KAAI,SAAAmB,GAEhC,OACkB,IAAhBhC,EAAKY,QACJZ,EAAKiC,MAAK,SAAAzB,GACT,QAAKwB,EAAKE,KAAKC,YAAYC,WACpBJ,EAAKE,KAAKC,YAAYC,UAAU/B,SAASG,MAMhD,gBAAC6B,EAAA,EAAD,CACEX,IAAKM,EAAKE,KAAKC,YAAYG,OAC3BC,KAAMP,EAAKE,KAAKM,QAChBC,MAAOT,EAAKE,KAAKC,YAAYM,MAC7BC,IAAG,qBAAuBV,EAAKE,KAAKC,YAAYG,OAChDK,IAAKX,EAAKE,KAAKC,YAAYG,OAC3BM,cACE,2BACE,qBAAGjC,UAAU,OAAM,gBAAC,IAAD,CAAiBkC,KAAMC,EAAAA,GAASC,MAAO,QAA1D,MAAsEf,EAAKE,KAAKc,UAAUC,MAA1F,UACA,qBAAGtC,UAAU,OAAM,gBAAC,IAAD,CAAiBkC,KAAMK,EAAAA,IAASH,MAAO,QAA1D,MAAsEf,EAAKE,KAAKC,YAAYgB,SAC3FnB,EAAKE,KAAKC,YAAYiB,eAAiB,qBAAGzC,UAAU,OAAM,qBAAG0C,MAAO,CAACnC,MAAM,WAAYP,UAAU,uBAAuB2C,OAAO,SAASC,KAAMvB,EAAKE,KAAKC,YAAYiB,eAAe,gBAAC,IAAD,CAAiBP,KAAMW,EAAAA,IAAQT,MAAO,QAA/J,MAA2Kf,EAAKE,KAAKC,YAAYiB,kBAI/PpB,EAAKE,KAAKC,YAAYsB,WAAa,gBAACC,EAAA,EAAD,CAAWC,IAAK3B,EAAKE,KAAKC,YAAYsB,kBAjB9E,SA8BR3D,EAAU,a,oBC3FhB,EAnB8B,WAC5B,OACE,gBAAC8D,EAAA,EAAD,CACAC,UAAU,2CAER,gBAACC,EAAA,EAAD,CACEC,WAAW,6DACXC,QAAQ,uFACRC,WAAY,CACV,CAACtC,MAAM,YAAaC,MAAM,cAC1B,CAACD,MAAM,kBAAmBC,MAAM,uBALpC,mBAQA,qBAAGjB,UAAU,SACb,gBAACuD,EAAD,S,sDCNC,IAAM9C,EA0BJ,CACL+C,SAtBe,iBAAwB,oBAAXC,QAuB5BC,kBAfwB,SAACzE,GACzB,IAAI0E,EAAyB,GAC7B1E,EAAKkC,kBAAkBC,MAAMwC,SAAQ,SAAAvC,GAC9BA,EAAKE,KAAKC,YAAYnC,MAC3BgC,EAAKE,KAAKC,YAAYnC,KAAKuE,SAAQ,SAAA/D,GACjC8D,EAAa7D,KAAKD,SAGtB,IAAIgE,EAAgB,IAAIC,IAAIH,GAE5B,OADsBI,MAAMC,KAAKH","sources":["webpack://reinherit-digital-hub/./src/components/shared/Layout/SideMainLayout/index.tsx","webpack://reinherit-digital-hub/./src/components/shared/ToolComponentsFeed/index.tsx","webpack://reinherit-digital-hub/./src/pages/tools/components.tsx","webpack://reinherit-digital-hub/./src/utils/ReinUtil.ts"],"sourcesContent":["import React from \"react\"\nimport { Col, Row } from \"react-bootstrap\"\n\ninterface Props {\n  side?: JSX.Element | JSX.Element[]\n  children?: JSX.Element | JSX.Element[]\n}\n\n/**\n * Handles left sidebar and right content layout. Checks responsive design.\n * @param props\n * @returns\n */\nconst SideMainLayout: React.FC<Props> = props => {\n  return (\n    <Row>\n      <Col>{props.side}</Col>\n      <Col lg={9} xxl={10}>\n        {props.children}\n      </Col>\n    </Row>\n  )\n}\n\nexport default SideMainLayout\n","import { faClock } from \"@fortawesome/free-regular-svg-icons\"\nimport { faLink, faStamp } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport { Badge, Form } from \"react-bootstrap\"\nimport { ReinUtils } from \"../../../utils/ReinUtil\"\nimport SideMainLayout from \"../Layout/SideMainLayout\"\nimport ReinCardGrid from \"../ReinCardGrid\"\nimport ReinGridCard from \"../ReinCardGrid/ReinGridCard\"\nimport Thumbnail from \"../Thumbnail\"\n\n/**\n * Overview over all available toolkit components\n * @returns\n */\nconst ToolkitComponentsFeed: React.FC = () => {\n  const data: ToolsQueryData.Data = useStaticQuery(ToolsQuery)\n\n  const [tags, setTags] = React.useState([])\n\n  const ALL_TAGS = [\n    \"Tag A\",\n    \"Tag B\",\n    \"Tag C\"\n  ]\n\n  const toggleTag = (toToggle: string) => {\n    let tagsCopied = [...tags]\n    if (tags.includes(toToggle)) {\n      let filtered = tagsCopied.filter(curTag => toToggle !== curTag)\n      setTags(() => filtered)\n    } else {\n      tagsCopied.push(toToggle)\n      setTags(() => tagsCopied)\n    }\n  }\n\n  return (\n    <SideMainLayout\n      side={\n        <div className=\"bg-white card p-4 mb-2 border-0 shadow\">\n          <p>Filter categories</p>\n          {tags.length !== 0 ? (\n            tags.map(tag => (\n              <Badge\n                onClick={() => toggleTag(tag)}\n                bg=\"white\"\n                color=\"black\"\n                text={\"black\" as \"white\"}\n                className=\"me-1 btn border\"\n              >\n                {tag}\n              </Badge>\n            ))\n          ) : (\n            <Badge\n              className=\"me-1 btn border\"\n              bg=\"white\"\n              color=\"black\"\n              text={\"black\" as \"white\"}\n            >\n              *\n            </Badge>\n          )}\n          <br></br>\n          {ReinUtils.extractUniqueTags(data as TaggedGraphQLData).sort().map(curTag => (\n            <Form.Check\n              type=\"checkbox\"\n              checked={tags.includes(curTag)}\n              defaultChecked={false}\n              key={curTag}\n              onClick={() => toggleTag(curTag)}\n              label={curTag}\n              value={curTag}\n            ></Form.Check>\n          ))}\n        </div>\n      }\n    >\n      <>\n        <ReinCardGrid>\n          {data.allMarkdownRemark.edges.map(edge => {\n            // filter only if no tags were selected\n            if (\n              tags.length !== 0 &&\n              !tags.some(curTag => {\n                if (!edge.node.frontmatter.tool_type) return false\n                return edge.node.frontmatter.tool_type.includes(curTag)\n              })\n            ) {\n              return\n            } else {\n              return (\n                <ReinGridCard\n                  key={edge.node.frontmatter.pageId}\n                  body={edge.node.excerpt}\n                  title={edge.node.frontmatter.title}\n                  url={`/tools/components/${edge.node.frontmatter.pageId}`}\n                  uid={edge.node.frontmatter.pageId}\n                  footerContent={\n                    <div>\n                      <p className=\"m-0\"><FontAwesomeIcon icon={faClock} scale={\".5x\"}/> - {edge.node.wordCount.words} words</p>\n                      <p className=\"m-0\"><FontAwesomeIcon icon={faStamp} scale={\".5x\"}/> - {edge.node.frontmatter.license}</p>\n                      {edge.node.frontmatter.mainReference && <p className=\"m-0\"><a style={{color:\"#6c757d\"}} className=\"text-decoration-none\" target=\"_blank\" href={edge.node.frontmatter.mainReference}><FontAwesomeIcon icon={faLink} scale={\".5x\"}/> - {edge.node.frontmatter.mainReference}</a></p>}\n                    </div>\n                  }\n                >\n                  {edge.node.frontmatter.thumbnail && <Thumbnail src={edge.node.frontmatter.thumbnail}></Thumbnail>}\n                </ReinGridCard>\n              )\n            }\n          })}\n        </ReinCardGrid>\n      </>\n    </SideMainLayout>\n  )\n}\n\nexport default ToolkitComponentsFeed\n\nconst ToolsQuery = graphql`\n  query ToolComponentsQuery {\n    allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"/toolcomponents/\" }\n        frontmatter: {}\n      }\n    ) {\n      edges {\n        node {\n          html\n          excerpt\n          frontmatter {\n            title\n            date(fromNow: true)\n            target_audience\n            layout\n            type\n            pageId\n            license\n            mainReference\n            thumbnail\n            tags\n          }\n          wordCount {\n            words\n          }\n        }\n      }\n    }\n  }\n`\n\ndeclare module ToolsQueryData {\n  export interface Frontmatter {\n    title: string\n    date: string\n    target_audience: string[]\n    layout?: any\n    author?: any\n    training_available: boolean\n    tool_type?: any\n    type: string\n    pageId: string\n    license: string\n    mainReference: string | null\n    thumbnail?: string\n    tags?: string[]\n  }\n\n  export interface Node {\n    html: string\n    excerpt: string\n    frontmatter: Frontmatter\n    wordCount: {\n      words: number\n    }\n  }\n\n  export interface Edge {\n    node: Node\n  }\n\n  export interface AllMarkdownRemark {\n    edges: Edge[]\n  }\n\n  export interface Data {\n    allMarkdownRemark: AllMarkdownRemark\n  }\n\n  export interface Extensions {}\n\n  export interface RootObject {\n    data: Data\n    extensions: Extensions\n  }\n}\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport ToolComponentsFeed from \"../../components/shared/ToolComponentsFeed\"\nimport BaseLayout from \"../../components/static/BaseLayout\"\nimport MainHeading from \"../../components/static/MainHeading\"\n\n/**\n * Main page for toolkit components (should render some kind of overview\n * over available toolkit components)\n * @returns \n */\nconst ToolkitComponentsPage = () => {\n  return (\n    <BaseLayout\n    pageTitle=\"Tool-components | ReInHerit Digital Hub\"\n    >\n      <MainHeading\n        subHeading=\"Building blocks for the applications provided by ReInHerit\"\n        subText=\"Here you'll find all the building blocks for the applications at the tool apps page.\"\n        breadCrumb={[\n          {label:\"Resources\", value:\"/resources\"},\n          {label:\"Tool-components\", value:\"/tools/components\"}\n        ]}\n      >Tool components</MainHeading>\n      <p className=\"w-75\"></p>\n      <ToolComponentsFeed></ToolComponentsFeed>\n    </BaseLayout>\n  )\n}\n\nexport default ToolkitComponentsPage\n","/**\n * Usual GraphQL data returned asking for all markdown entries in Reinherit.\n * Just focuses on given tags. \n */\nexport interface TaggedGraphQLData {\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        frontmatter: {\n          tags: string[]\n        }\n      }\n    }[]\n  }\n}\n\n/**\n * Collection or Reinherit specific utility methods.\n */\nexport const ReinUtils = (() => {\n  /**\n   * Returns true if SSR is in process, false if only client side processing is in progress.\n   * @returns\n   */\n  const checkSSR = () => typeof window === \"undefined\"\n\n  /**\n   * Returns a list of unique tags from given graphql data result.\n   * (needed for creating a list of actual used tags in given graphql results like in tool-component overview)\n   * If no data is available will return an empty array.\n   * @returns\n   */\n  const extractUniqueTags = (data: TaggedGraphQLData): string[] => {\n    let allGivenTags: string[] = []\n    data.allMarkdownRemark.edges.forEach(edge => {\n      if (!edge.node.frontmatter.tags) return\n      edge.node.frontmatter.tags.forEach(curTag => {\n        allGivenTags.push(curTag)\n      })\n    })\n    let uniqueTagsSet = new Set(allGivenTags)\n    let uniqueTagsArray = Array.from(uniqueTagsSet)\n    return uniqueTagsArray\n  }\n\n  return {\n    checkSSR,\n    extractUniqueTags,\n  }\n})()\n"],"names":["props","side","lg","xxl","children","data","useStaticQuery","ToolsQuery","React","tags","setTags","toggleTag","toToggle","tagsCopied","includes","filtered","filter","curTag","push","SideMainLayout","className","length","map","tag","Badge","onClick","bg","color","text","ReinUtils","sort","Form","type","checked","defaultChecked","key","label","value","ReinCardGrid","allMarkdownRemark","edges","edge","some","node","frontmatter","tool_type","ReinGridCard","pageId","body","excerpt","title","url","uid","footerContent","icon","faClock","scale","wordCount","words","faStamp","license","mainReference","style","target","href","faLink","thumbnail","Thumbnail","src","BaseLayout","pageTitle","MainHeading","subHeading","subText","breadCrumb","ToolComponentsFeed","checkSSR","window","extractUniqueTags","allGivenTags","forEach","uniqueTagsSet","Set","Array","from"],"sourceRoot":""}